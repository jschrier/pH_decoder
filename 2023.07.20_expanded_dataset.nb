(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    269453,       5645]
NotebookOptionsPosition[    263044,       5535]
NotebookOutlinePosition[    263644,       5555]
CellTagsIndexPosition[    263601,       5552]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Import Data", "Section",
 CellChangeTimes->{{3.8986865423033247`*^9, 
  3.898686544423237*^9}},ExpressionUUID->"41bfdf1c-cbae-498c-b0ba-\
4ef64f7ba1eb"],

Cell["\<\
Use a local copy of the data provided by Christelle Ekosso on 20 July 2023, \
via Slack/Google Drive;
\
\>", "Text",
 CellChangeTimes->{{3.8987016484618073`*^9, 3.898701653997036*^9}, {
  3.898701711198078*^9, 3.8987017340766897`*^9}, {3.898702092249419*^9, 
  3.898702093761853*^9}, {3.8989617414761353`*^9, 3.898961747658141*^9}, {
  3.899284622871222*^9, 
  3.899284623073865*^9}},ExpressionUUID->"4815a82b-fa12-4ff9-8213-\
9f53b7e54dc4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SeedRandom", "[", "1841", "]"}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"set", " ", "a", " ", "random", " ", "seed", " ", "for", " ", 
    RowBox[{"training", "/", "test"}], " ", "set", " ", "generation", " ", 
    "for", " ", "replicability"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "@", 
   RowBox[{"NotebookDirectory", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"<<", "\"\<src/platereader.wl\>\""}]}], "Input",
 CellChangeTimes->{{3.898684411303891*^9, 3.898684432201079*^9}, {
  3.8987018813207407`*^9, 3.898701896012442*^9}},
 CellLabel->
  "In[305]:=",ExpressionUUID->"8ff1613a-309d-4d85-a065-e5221190e944"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "some", " ", "trickiness", " ", "to", " ", "merge", " ", "the", " ", 
     "files", " ", "provided", " ", "in", " ", "an", " ", "appropriate", " ", 
     "way"}], "..."}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"spectra", "=", 
     RowBox[{"With", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"sortedPlateFileNames", " ", "=", 
         RowBox[{
          RowBox[{"SortBy", "[", 
           RowBox[{
            RowBox[{"StringTake", "[", 
             RowBox[{"#", ",", 
              RowBox[{"-", "10"}]}], "]"}], "&"}], "]"}], "@", 
          RowBox[{
          "FileNames", "[", "\"\<data/2023_07_20_PH_Indicator/*.txt\>\"", 
           "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Normal", "@", 
        RowBox[{
         RowBox[{"Map", "[", "Flatten", "]"}], "@", 
         RowBox[{
          RowBox[{"Merge", "[", "Join", "]"}], "@", 
          RowBox[{
           RowBox[{"Map", "[", "importPlateReaderFile", "]"}], "@", 
           "sortedPlateFileNames"}]}]}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"measuredpH", " ", "=", " ", 
     RowBox[{"With", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"dataRows", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{"4", ",", "11"}], "]"}], ",", 
           RowBox[{"Range", "[", 
            RowBox[{"16", ",", "23"}], "]"}], ",", 
           RowBox[{"Range", "[", 
            RowBox[{"27", ",", "34"}], "]"}], ",", 
           RowBox[{"Range", "[", 
            RowBox[{"38", ",", "45"}], "]"}], ",", 
           RowBox[{"Range", "[", 
            RowBox[{"49", ",", "56"}], "]"}], ",", 
           RowBox[{"Range", "[", 
            RowBox[{"61", ",", "68"}], "]"}]}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Import", "[", "\[IndentingNewLine]", 
         RowBox[{
         "\"\<data/2023_07_20_PH_Indicator/20230720 pH Indicator \
Plates.xlsx\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<Data\>\"", ",", "2", ",", "dataRows", ",", 
            RowBox[{"2", ";;", "13"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<EmptyField\>\"", "->", 
           RowBox[{"Missing", " ", "[", "]"}]}]}], "]"}], "//", "Flatten"}]}],
       "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "handle", " ", "an", " ", "extraneous", " ", "sample", " ", "in", " ", 
      "Plate", " ", "4"}], ",", " ", 
     RowBox[{
      RowBox[{
      "as", " ", "noted", " ", "in", " ", "the", " ", "data", " ", 
       "integrity", " ", "log"}], ";", " ", 
      RowBox[{
      "this", " ", "throws", " ", "off", " ", "our", " ", "analysis", " ", 
       "of", " ", "the", " ", "triplicate", " ", "measurement", " ", 
       "statistics"}], ";", " ", 
      RowBox[{
      "for", " ", "simplicity", " ", "we", " ", "will", " ", "exclude", " ", 
       "it", " ", "from", " ", "all", " ", "processes"}]}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"measuredpH", " ", "=", 
     RowBox[{"measuredpH", "//", " ", 
      RowBox[{"With", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"plate", " ", "=", " ", "4"}], ",", " ", 
          RowBox[{"row", " ", "=", " ", "6"}], ",", " ", 
          RowBox[{"col", " ", "=", " ", "10"}]}], " ", 
         RowBox[{"(*", 
          RowBox[{"4", ":", "F10"}], "*)"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", " ", "[", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"position", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"plate", "-", "1"}], ")"}], "*", "96"}], "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"row", "-", "1"}], ")"}], "*", "12"}], "+", "col"}]}], 
           "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"ReplacePart", "[", " ", 
           RowBox[{"position", "->", 
            RowBox[{"Missing", "[", "]"}]}], "]"}]}], "]"}]}], "]"}]}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"wavelengths", "=", 
     RowBox[{"spectra", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.8989628919958467`*^9, 3.8989629181729603`*^9}, {
  3.898963198488193*^9, 3.8989632430499496`*^9}, {3.898963529810301*^9, 
  3.898963618379635*^9}, {3.898963720337926*^9, 3.89896375169909*^9}, {
  3.898965594718377*^9, 3.898965606950485*^9}, {3.898970421531712*^9, 
  3.8989704549909983`*^9}, {3.8992818870277987`*^9, 3.899281905263413*^9}, {
  3.899281950149136*^9, 3.899281954496604*^9}, {3.8992820005984793`*^9, 
  3.899282018441965*^9}, {3.899282896566366*^9, 3.89928291158316*^9}, {
  3.899284232131193*^9, 3.899284261869452*^9}, {3.8992843531135483`*^9, 
  3.8992844782763243`*^9}, {3.899284524782825*^9, 3.8992845794827957`*^9}},
 CellLabel->
  "In[308]:=",ExpressionUUID->"6aca49fe-a3aa-4286-907c-784382d9dae6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "get", " ", "data", " ", "into", " ", "a", " ", "list", " ", "of", " ", 
     RowBox[{"{", "spectra", "}"}]}], "->", " ", 
    RowBox[{"pH", " ", "values"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"normalizeSpectrum", "[", 
     RowBox[{"l_", "?", "VectorQ"}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"Normalize", "[", 
       RowBox[{"#", ",", "Total"}], "]"}], "&"}], "@", 
     RowBox[{"(", 
      RowBox[{"l", "-", 
       RowBox[{"Min", "[", "l", "]"}]}], ")"}]}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"output", "[", 
      RowBox[{"spectrum_List", ",", 
       RowBox[{"pH_", "?", "NumericQ"}]}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"normalizeSpectrum", "[", "spectrum", "]"}], "->", "pH"}], 
      ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"output", "[", 
      RowBox[{"_", ",", "_"}], "]"}], ":=", "Nothing"}], ";"}], "  ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "if", " ", "there", " ", "is", " ", "not", " ", "a", " ", "Numeric", " ",
       "pH", " ", "value"}], ",", " ", 
     RowBox[{
     "then", " ", "drop", " ", "this", " ", "entry", " ", "from", " ", "both",
       " ", "sets"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
      "in", " ", "the", " ", "order", " ", "they", " ", "are", " ", 
       "presented"}], "..."}], "no", " ", "need", " ", "to", " ", "sort", " ",
      "by", " ", "pH"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"data", " ", "=", 
     RowBox[{"MapThread", "[", 
      RowBox[{"output", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"spectra", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2", ",", "All"}], "]"}], "]"}], "]"}], ",", 
         "measuredpH"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"results", " ", "=", " ", 
     RowBox[{"Association", "[", "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.898685343319233*^9, 3.898685366684609*^9}, {
   3.898685412222457*^9, 3.898685469798463*^9}, {3.898685503166106*^9, 
   3.898685614797386*^9}, {3.8986856500850067`*^9, 3.8986856618776627`*^9}, {
   3.8989636284228487`*^9, 3.898963703485956*^9}, {3.8989637589391937`*^9, 
   3.898963784135991*^9}, {3.898963855146412*^9, 3.8989640044688873`*^9}, {
   3.8989640534863462`*^9, 3.898964079677826*^9}, {3.898964214537806*^9, 
   3.898964226743764*^9}, {3.898964281145199*^9, 3.89896432878685*^9}, 
   3.898965591243697*^9, {3.898965637273336*^9, 3.8989656433779497`*^9}, {
   3.898970578178082*^9, 3.898970594838502*^9}},
 CellLabel->
  "In[312]:=",ExpressionUUID->"dd4d6e42-867a-4aa9-8329-2ebc0d0b79b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Assess the Performance Limit", "Section",
 CellChangeTimes->{{3.898702574902722*^9, 3.8987026015339127`*^9}, {
  3.89896514136377*^9, 3.898965146109023*^9}, {3.898965623787393*^9, 
  3.898965624165556*^9}},ExpressionUUID->"f5d0b806-c80f-4db3-a9d2-\
f8c84e915187"],

Cell[CellGroupData[{

Cell["An ideal world", "Subsection",
 CellChangeTimes->{{3.8989679095546227`*^9, 3.898967912440444*^9}, {
  3.898968363797969*^9, 
  3.8989683657550507`*^9}},ExpressionUUID->"377b13cc-230c-41f3-acfb-\
b115bd942306"],

Cell[TextData[{
 StyleBox["For reference",
  FontWeight->"Bold"],
 ":  If the error was bounded by the distance to the nearest example...how \
much would our pH error be? (In other words, if we had a perfect classifier \
that had to put things into the nearest example...and there was no error in \
our measured pH values, how close would it be)  Assess this by sampling 5 \
times..."
}], "Text",
 CellChangeTimes->{{3.898688713573777*^9, 3.8986887367260942`*^9}, {
  3.8986888132304087`*^9, 3.898688824254294*^9}, {3.898694667295005*^9, 
  3.898694667630776*^9}, {3.898702953250988*^9, 3.898703013290135*^9}, {
  3.898964761702841*^9, 3.898964761991652*^9}, {3.898969937270409*^9, 
  3.898969950886354*^9}},ExpressionUUID->"9d261de2-a048-44a9-98a1-\
60eaab59ddf6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"sample", "=", "\[IndentingNewLine]", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ph", " ", "=", " ", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"train", ",", "test"}], "}"}], "=", 
         RowBox[{
          RowBox[{"ResourceFunction", "[", "\"\<TrainTestSplit\>\"", "]"}], 
          "[", "ph", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"pred", "=", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{"First", "/@", 
           RowBox[{
            RowBox[{"Nearest", "[", "train", "]"}], "/@", "test"}]}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Mean", "@", 
           RowBox[{"Abs", "[", 
            RowBox[{"test", "-", "pred"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"Correlation", "[", 
            RowBox[{"test", ",", "pred"}], "]"}], "^", "2"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", "5"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"results", "[", "\"\<pH Sampling Limit\>\"", "]"}], "=", 
  RowBox[{"Around", "/@", 
   RowBox[{"Transpose", "[", "sample", "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.898702345529038*^9, 3.898702351304068*^9}, {
  3.898702604510951*^9, 3.898702727836894*^9}, {3.898702772229437*^9, 
  3.8987028941717463`*^9}, {3.898702993283979*^9, 3.898703016251086*^9}, {
  3.898964402946795*^9, 3.898964447155445*^9}, {3.898965646194263*^9, 
  3.898965658489994*^9}, {3.8992847054231577`*^9, 3.8992847142566433`*^9}},
 CellLabel->
  "In[317]:=",ExpressionUUID->"bf755c77-b890-4d85-a3c4-48a4a01f8bca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TemplateBox[{"0.0164", "0.0025"},
     "Around"],
    Around[0.016354430379746775`, 0.0024502745841178428`]], ",", 
   InterpretationBox[
    TemplateBox[{"0.999916", "0.000020"},
     "Around"],
    Around[0.9999155655142828, 0.000020081352563486272`]]}], "}"}]], "Output",\

 CellChangeTimes->{{3.898964441511982*^9, 3.898964447435437*^9}, 
   3.898965665501089*^9, 3.8989659937333517`*^9, 3.8992846596236563`*^9, 
   3.899284714665167*^9},
 CellLabel->
  "Out[318]=",ExpressionUUID->"43462ae0-7f8a-44b3-a531-1cd33fd7799d"]
}, Open  ]],

Cell["\<\
We can also try to assess this by looking at the distance that any individual \
pH is from the closest pH in the dataset:\
\>", "Text",
 CellChangeTimes->{{3.898964771579891*^9, 
  3.898964794090745*^9}},ExpressionUUID->"1b801ed5-9f6e-4eb0-8166-\
ca02237055ae"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"closest", "=", 
    RowBox[{"With", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"pH", " ", "=", " ", 
        RowBox[{"data", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Last", "/@", 
       RowBox[{"Nearest", "[", 
        RowBox[{
         RowBox[{"pH", "->", "\"\<Distance\>\""}], ",", "pH", ",", " ", "2"}],
         "]"}]}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{"closest", ",", "\[IndentingNewLine]", 
   RowBox[{"PlotRange", "->", "All"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Frame", "->", "True"}], ",", 
   RowBox[{"FrameLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<pH error\>\"", ",", " ", "\"\<Counts\>\""}], "}"}]}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.89896450532624*^9, 3.8989647021261997`*^9}, {
  3.8989648010924187`*^9, 3.898964858002363*^9}, {3.898970509753738*^9, 
  3.8989705124941473`*^9}},
 CellLabel->
  "In[319]:=",ExpressionUUID->"3f04ea22-ef2c-4719-a899-27a2712d9998"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.48299999999999993`], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.48299999999999993`], Thickness[Small]}], 
     RectangleBox[{0., 0}, {0.005, 153.},
      RoundingRadius->0], RectangleBox[{0.01, 0}, {0.015, 140.},
      RoundingRadius->0], RectangleBox[{0.02, 0}, {0.025, 44.},
      RoundingRadius->0], RectangleBox[{0.03, 0}, {0.035, 22.},
      RoundingRadius->0], RectangleBox[{0.04, 0}, {0.045, 9.},
      RoundingRadius->0], RectangleBox[{0.05, 0}, {0.055, 10.},
      RoundingRadius->0], RectangleBox[{0.06, 0}, {0.065, 7.},
      RoundingRadius->0], RectangleBox[{0.07, 0}, {0.075, 1.},
      RoundingRadius->0], RectangleBox[{0.08, 0}, {0.085, 1.},
      RoundingRadius->0], RectangleBox[{0.09, 0}, {0.095, 2.},
      RoundingRadius->0], RectangleBox[{0.1, 0}, {0.105, 1.},
      RoundingRadius->0], RectangleBox[{0.12, 0}, {0.125, 2.},
      RoundingRadius->0], RectangleBox[{0.15, 0}, {0.155, 1.},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.0031, 0},
  Frame->True,
  FrameLabel->{{
     FormBox[
      TagBox["\"Counts\"", HoldForm], TraditionalForm], None}, {
     FormBox[
      TagBox["\"pH error\"", HoldForm], TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0., 0.155}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {None, 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.898964648461522*^9, 3.898964702485569*^9}, {
   3.898964823444777*^9, 3.898964858562098*^9}, 3.899284663154586*^9, 
   3.899284718087173*^9},
 CellLabel->
  "Out[320]=",ExpressionUUID->"9a701cae-9f02-4022-b071-57fedc7cf8cc"]
}, Open  ]],

Cell["\<\
Alternatively, quantify this with the cumulative distribution function:  95% \
of the time, we are less than 0.05 pH units away.\
\>", "Text",
 CellChangeTimes->{{3.898964879380816*^9, 3.8989649011454887`*^9}, {
  3.898964938041046*^9, 
  3.898964945207862*^9}},ExpressionUUID->"f7538c97-fa47-4ce1-801e-\
cff34f43a712"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Quantile", "[", 
   RowBox[{"closest", ",", "0.95"}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{
  "closest", ",", "Automatic", ",", "\"\<CDF\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"Frame", "->", "True"}], ",", 
   RowBox[{"FrameLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<pH error\>\"", ",", " ", "\"\<CDF\>\""}], "}"}]}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.898964717931131*^9, 3.898964732020774*^9}, {
   3.8989648443739634`*^9, 3.8989648660060673`*^9}, {3.8989649051385527`*^9, 
   3.898964926527629*^9}, {3.89896496417041*^9, 3.898964968859325*^9}, 
   3.8992847212476683`*^9},
 CellLabel->
  "In[321]:=",ExpressionUUID->"dd138752-3338-42b6-a6bb-89ff7812a6e3"],

Cell[BoxData["0.04999999999999982`"], "Output",
 CellChangeTimes->{{3.898964724860173*^9, 3.8989647324588833`*^9}, 
   3.89896486628012*^9, {3.8989649214635277`*^9, 3.8989649269128237`*^9}, {
   3.89896496713526*^9, 3.898964970284181*^9}, 3.899284722761325*^9},
 CellLabel->
  "Out[321]=",ExpressionUUID->"d2103630-28aa-4a8c-b716-e5bcbd36c882"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.609], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.609], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0., 0}, {0.005, 0.3893129770992367}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{42.199999999999996`, 70.84545454545454}, {
           5.84948558202656, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.3893129770992367]& ,
        TagBoxNote->"0.3893129770992367"],
       StyleBox["0.3893129770992367`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.3893129770992367, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.005, 0}, {0.01, 0.3893129770992367}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{70.34545454545454, 98.99090909090907}, {
           5.84948558202656, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.3893129770992367]& ,
        TagBoxNote->"0.3893129770992367"],
       StyleBox["0.3893129770992367`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.3893129770992367, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.01, 0}, {0.015, 0.7455470737913487}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{98.49090909090907, 
           127.13636363636363`}, {-61.60349880081026, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.7455470737913487]& ,
        TagBoxNote->"0.7455470737913487"],
       StyleBox["0.7455470737913487`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.7455470737913487, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.015, 0}, {0.02, 0.7455470737913487}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{126.63636363636363`, 
           155.28181818181815`}, {-61.60349880081026, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.7455470737913487]& ,
        TagBoxNote->"0.7455470737913487"],
       StyleBox["0.7455470737913487`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.7455470737913487, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.02, 0}, {0.025, 0.8575063613231553}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{154.78181818181815`, 
           183.4272727272727}, {-82.80300817827325, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.8575063613231553]& ,
        TagBoxNote->"0.8575063613231553"],
       StyleBox["0.8575063613231553`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.8575063613231553, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.025, 0}, {0.03, 0.8575063613231553}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{182.9272727272727, 
           211.57272727272724`}, {-82.80300817827325, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.8575063613231553]& ,
        TagBoxNote->"0.8575063613231553"],
       StyleBox["0.8575063613231553`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.8575063613231553, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.03, 0}, {0.035, 0.9134860050890586}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{211.07272727272724`, 
           239.7181818181818}, {-93.40276286700475, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9134860050890586]& ,
        TagBoxNote->"0.9134860050890586"],
       StyleBox["0.9134860050890586`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9134860050890586, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.035, 0}, {0.04, 0.9134860050890586}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{239.2181818181818, 
           267.8636363636363}, {-93.40276286700475, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9134860050890586]& ,
        TagBoxNote->"0.9134860050890586"],
       StyleBox["0.9134860050890586`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9134860050890586, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.04, 0}, {0.045, 0.9363867684478372}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{267.3636363636363, 
           296.00909090909084`}, {-97.73902614875854, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9363867684478372]& ,
        TagBoxNote->"0.9363867684478372"],
       StyleBox["0.9363867684478372`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9363867684478372, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.045, 0}, {0.05, 0.9363867684478372}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{295.50909090909084`, 
           324.1545454545454}, {-97.73902614875854, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9363867684478372]& ,
        TagBoxNote->"0.9363867684478372"],
       StyleBox["0.9363867684478372`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9363867684478372, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.05, 0}, {0.055, 0.9618320610687023}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{323.6545454545454, 
           352.29999999999995`}, {-102.5570964618183, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9618320610687023]& ,
        TagBoxNote->"0.9618320610687023"],
       StyleBox["0.9618320610687023`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9618320610687023, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.055, 0}, {0.06, 0.9618320610687023}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{351.79999999999995`, 
           380.4454545454545}, {-102.5570964618183, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9618320610687023]& ,
        TagBoxNote->"0.9618320610687023"],
       StyleBox["0.9618320610687023`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9618320610687023, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.06, 0}, {0.065, 0.9796437659033079}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{379.9454545454545, 
           408.590909090909}, {-105.92974568096014`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9796437659033079]& ,
        TagBoxNote->"0.9796437659033079"],
       StyleBox["0.9796437659033079`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9796437659033079, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.065, 0}, {0.07, 0.9796437659033079}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{408.090909090909, 
           436.7363636363636}, {-105.92974568096014`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9796437659033079]& ,
        TagBoxNote->"0.9796437659033079"],
       StyleBox["0.9796437659033079`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9796437659033079, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.07, 0}, {0.075, 0.9821882951653945}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{436.2363636363636, 
           464.88181818181806`}, {-106.41155271226614`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9821882951653945]& ,
        TagBoxNote->"0.9821882951653945"],
       StyleBox["0.9821882951653945`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9821882951653945, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.075, 0}, {0.08, 0.9821882951653945}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{464.38181818181806`, 
           493.02727272727265`}, {-106.41155271226614`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9821882951653945]& ,
        TagBoxNote->"0.9821882951653945"],
       StyleBox["0.9821882951653945`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9821882951653945, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.08, 0}, {0.085, 0.984732824427481}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{492.52727272727265`, 
           521.1727272727272}, {-106.89335974357209`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.984732824427481]& ,
        TagBoxNote->"0.984732824427481"],
       StyleBox["0.984732824427481`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.984732824427481, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.085, 0}, {0.09, 0.984732824427481}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{520.6727272727272, 
           549.3181818181818}, {-106.89335974357209`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.984732824427481]& ,
        TagBoxNote->"0.984732824427481"],
       StyleBox["0.984732824427481`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.984732824427481, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.09, 0}, {0.095, 0.989821882951654}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{548.8181818181818, 
           577.4636363636363}, {-107.85697380618404`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.989821882951654]& ,
        TagBoxNote->"0.989821882951654"],
       StyleBox["0.989821882951654`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.989821882951654, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.095, 0}, {0.1, 0.989821882951654}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{576.9636363636363, 
           605.6090909090909}, {-107.85697380618404`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.989821882951654]& ,
        TagBoxNote->"0.989821882951654"],
       StyleBox["0.989821882951654`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.989821882951654, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.1, 0}, {0.105, 0.9923664122137406}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{605.1090909090909, 
           633.7545454545453}, {-108.33878083749005`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9923664122137406]& ,
        TagBoxNote->"0.9923664122137406"],
       StyleBox["0.9923664122137406`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9923664122137406, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.105, 0}, {0.11, 0.9923664122137406}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{633.2545454545453, 661.9}, {-108.33878083749005`, 
           80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9923664122137406]& ,
        TagBoxNote->"0.9923664122137406"],
       StyleBox["0.9923664122137406`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9923664122137406, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.11, 0}, {0.115, 0.9923664122137406}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{661.4, 690.0454545454545}, {-108.33878083749005`, 
           80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9923664122137406]& ,
        TagBoxNote->"0.9923664122137406"],
       StyleBox["0.9923664122137406`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9923664122137406, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.115, 0}, {0.12, 0.9923664122137406}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{689.5454545454545, 
           718.190909090909}, {-108.33878083749005`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9923664122137406]& ,
        TagBoxNote->"0.9923664122137406"],
       StyleBox["0.9923664122137406`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9923664122137406, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.12, 0}, {0.125, 0.9974554707379135}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{717.690909090909, 
           746.3363636363636}, {-109.30239490010197`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9974554707379135]& ,
        TagBoxNote->"0.9974554707379135"],
       StyleBox["0.9974554707379135`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9974554707379135, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.125, 0}, {0.13, 0.9974554707379135}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{745.8363636363636, 
           774.4818181818181}, {-109.30239490010197`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9974554707379135]& ,
        TagBoxNote->"0.9974554707379135"],
       StyleBox["0.9974554707379135`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9974554707379135, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.13, 0}, {0.135, 0.9974554707379135}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{773.9818181818181, 
           802.6272727272727}, {-109.30239490010197`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9974554707379135]& ,
        TagBoxNote->"0.9974554707379135"],
       StyleBox["0.9974554707379135`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9974554707379135, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.135, 0}, {0.14, 0.9974554707379135}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{802.1272727272727, 
           830.7727272727273}, {-109.30239490010197`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9974554707379135]& ,
        TagBoxNote->"0.9974554707379135"],
       StyleBox["0.9974554707379135`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9974554707379135, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.14, 0}, {0.145, 0.9974554707379135}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{830.2727272727273, 
           858.9181818181817}, {-109.30239490010197`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9974554707379135]& ,
        TagBoxNote->"0.9974554707379135"],
       StyleBox["0.9974554707379135`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9974554707379135, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.145, 0}, {0.15, 0.9974554707379135}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{858.4181818181817, 
           887.0636363636362}, {-109.30239490010197`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 0.9974554707379135]& ,
        TagBoxNote->"0.9974554707379135"],
       StyleBox["0.9974554707379135`", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[0.9974554707379135, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.15, 0}, {0.155, 1.}, "RoundingRadius" -> 0]},
          ImageSizeCache->{{886.5636363636362, 
           915.2090909090908}, {-109.78420193140795`, 80.06596137184107}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.0011, 0},
  Frame->True,
  FrameLabel->{{
     FormBox[
      TagBox["\"CDF\"", HoldForm], TraditionalForm], None}, {
     FormBox[
      TagBox["\"pH error\"", HoldForm], TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->NCache[{{0, 
      Rational[11, 200]}, {All, All}}, {{0, 0.055}, {All, All}}],
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {None, 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.898964724860173*^9, 3.8989647324588833`*^9}, 
   3.89896486628012*^9, {3.8989649214635277`*^9, 3.8989649269128237`*^9}, {
   3.89896496713526*^9, 3.898964970284181*^9}, 3.899284722921072*^9},
 CellLabel->
  "Out[322]=",ExpressionUUID->"a80d3c31-3d35-44e0-a5c2-98a8125a675c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Variations present in the Triplicate Trials", "Subsection",
 CellChangeTimes->{{3.898967925218321*^9, 3.8989679305975523`*^9}, {
  3.898968371386742*^9, 
  3.8989683759862843`*^9}},ExpressionUUID->"0382c8c8-f9d9-4770-9c03-\
761319909325"],

Cell["\<\
A nice aspect of this dataset is that each experiment is repeated in \
triplicate!  We group these (before we sort things) and then we can evaluate \
statistics.  As we are evaluating our models by the mean absolute deviation \
(MAD) between the predicted and \[OpenCurlyDoubleQuote]true\
\[CloseCurlyDoubleQuote] values, it seems only fair to do the same here; we \
assume the \[OpenCurlyDoubleQuote]true\[CloseCurlyDoubleQuote] value of each \
triplicate is the mean of the 3 examples, and then compute the MAD from that. \
 Computing R^2 doesn\[CloseCurlyQuote]t really make sense here, because there \
is only one \[OpenCurlyDoubleQuote]true\[CloseCurlyDoubleQuote] value for \
each of the 3 points\
\>", "Text",
 CellChangeTimes->{{3.898968377513228*^9, 3.898968399102086*^9}, {
  3.8989684537226467`*^9, 3.898968549665818*^9}, {3.898968633454438*^9, 
  3.898968659038188*^9}},ExpressionUUID->"46811501-d62f-4cdc-a792-\
b9f2d642c8b5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"groupTriplicates", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Partition", "[", 
      RowBox[{"#", ",", "3"}], "]"}], "&"}], "@", 
    RowBox[{"DeleteMissing", "@", "measuredpH"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stdDevTriplicates", "=", 
   RowBox[{"StandardDeviation", "/@", "groupTriplicates"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"madTriplicates", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Mean", "[", 
      RowBox[{"Abs", "[", 
       RowBox[{"(", 
        RowBox[{"#", "-", 
         RowBox[{"Mean", "[", "#", "]"}]}], ")"}], "]"}], "]"}], "&"}], "/@", 
    "groupTriplicates"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.89896794054608*^9, 3.898967982638096*^9}, {
  3.8989680771848087`*^9, 3.898968088855888*^9}, {3.8989681429182367`*^9, 
  3.898968160319133*^9}, {3.8992819181026382`*^9, 3.8992819295236177`*^9}},
 CellLabel->
  "In[323]:=",ExpressionUUID->"27564f90-9b4f-45f3-b041-462b42eb2d2c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Histogram", "[", 
   RowBox[{"madTriplicates", ",", "\[IndentingNewLine]", 
    RowBox[{"Frame", "->", "True"}], ",", 
    RowBox[{"FrameLabel", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Triplicate MAD\>\"", ",", "\"\<Counts\>\""}], "}"}]}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"PlotRange", "->", "All"}]}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Histogram", "[", 
   RowBox[{"madTriplicates", ",", "\[IndentingNewLine]", 
    RowBox[{"Frame", "->", "True"}], ",", 
    RowBox[{"FrameLabel", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Triplicate MAD\>\"", ",", "\"\<Counts\>\""}], "}"}]}]}], 
   "]"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"results", "[", "\"\<Triplicate Variation Limit\>\"", "]"}], "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Around", "[", "madTriplicates", "]"}], ",", 
    RowBox[{"Missing", "[", "]"}]}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.898967799301433*^9, 3.898967865494317*^9}, 
   3.8989679370591183`*^9, {3.898967995853545*^9, 3.8989679969171352`*^9}, {
   3.898968167414424*^9, 3.8989683148347797`*^9}, {3.898968671223743*^9, 
   3.898968730678824*^9}, {3.8989699685843697`*^9, 3.898969983930831*^9}, {
   3.899284738033993*^9, 3.899284742086699*^9}},
 CellLabel->
  "In[329]:=",ExpressionUUID->"e72bfe56-3e20-459c-b5d5-d4744d941b6d"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.616], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.616], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0., 0}, {0.05, 56.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{39.260000000000005`, 
           65.80000000000001}, {-110.69149683309547`, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 56]& ,
        TagBoxNote->"56"],
       StyleBox["56", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[56, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.05, 0}, {0.1, 31.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{65.30000000000001, 
           91.84000000000002}, {-25.37383604238734, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 31]& ,
        TagBoxNote->"31"],
       StyleBox["31", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[31, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.1, 0}, {0.15, 23.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{91.34000000000002, 117.88000000000001`}, {
           1.927815410639269, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 23]& ,
        TagBoxNote->"23"],
       StyleBox["23", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[23, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.15, 0}, {0.2, 7.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{117.38000000000001`, 143.92000000000002`}, {
           56.53111831669248, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 7]& ,
        TagBoxNote->"7"],
       StyleBox["7", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[7, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.2, 0}, {0.25, 5.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{143.42000000000002`, 169.96000000000004`}, {
           63.35653117994913, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 5]& ,
        TagBoxNote->"5"],
       StyleBox["5", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.25, 0}, {0.3, 2.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{169.46000000000004`, 196.}, {73.59465047483411, 
           80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2]& ,
        TagBoxNote->"2"],
       StyleBox["2", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.3, 0}, {0.35, 5.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{195.5, 222.04000000000002`}, {63.35653117994913, 
           80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 5]& ,
        TagBoxNote->"5"],
       StyleBox["5", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.35, 0}, {0.4, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{221.54000000000002`, 248.08000000000004`}, {
           77.00735690646243, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.55, 0}, {0.6, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{325.70000000000005`, 352.24}, {77.00735690646243, 
           80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.012, 0},
  Frame->True,
  FrameLabel->{{
     FormBox[
      TagBox["\"Counts\"", HoldForm], TraditionalForm], None}, {
     FormBox[
      TagBox["\"Triplicate MAD\"", HoldForm], TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0., 0.6}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {None, 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.898967843631578*^9, 3.898967865842458*^9}, {
   3.8989681763436337`*^9, 3.89896820088093*^9}, 3.898968317060367*^9, {
   3.898968715768503*^9, 3.8989687312627*^9}, {3.898969970934989*^9, 
   3.8989699843133583`*^9}, {3.899284747922751*^9, 3.899284764868944*^9}},
 CellLabel->
  "Out[329]=",ExpressionUUID->"0ff0e0a7-3399-4a2c-881d-b6ba7abe1ebf"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.602], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.602], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0., 0}, {0.05, 56.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{39.260000000000005`, 
           65.80000000000001}, {-110.69149683309547`, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 56]& ,
        TagBoxNote->"56"],
       StyleBox["56", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[56, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.05, 0}, {0.1, 31.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{65.30000000000001, 
           91.84000000000002}, {-25.37383604238734, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 31]& ,
        TagBoxNote->"31"],
       StyleBox["31", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[31, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.1, 0}, {0.15, 23.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{91.34000000000002, 117.88000000000001`}, {
           1.927815410639269, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 23]& ,
        TagBoxNote->"23"],
       StyleBox["23", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[23, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.15, 0}, {0.2, 7.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{117.38000000000001`, 143.92000000000002`}, {
           56.53111831669248, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 7]& ,
        TagBoxNote->"7"],
       StyleBox["7", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[7, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.2, 0}, {0.25, 5.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{143.42000000000002`, 169.96000000000004`}, {
           63.35653117994913, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 5]& ,
        TagBoxNote->"5"],
       StyleBox["5", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.25, 0}, {0.3, 2.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{169.46000000000004`, 196.}, {73.59465047483411, 
           80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2]& ,
        TagBoxNote->"2"],
       StyleBox["2", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.3, 0}, {0.35, 5.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{195.5, 222.04000000000002`}, {63.35653117994913, 
           80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 5]& ,
        TagBoxNote->"5"],
       StyleBox["5", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.35, 0}, {0.4, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{221.54000000000002`, 248.08000000000004`}, {
           77.00735690646243, 80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.55, 0}, {0.6, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{325.70000000000005`, 352.24}, {77.00735690646243, 
           80.92006333809076}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.012, 0},
  Frame->True,
  FrameLabel->{{
     FormBox[
      TagBox["\"Counts\"", HoldForm], TraditionalForm], None}, {
     FormBox[
      TagBox["\"Triplicate MAD\"", HoldForm], TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0., 0.6}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {None, 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.898967843631578*^9, 3.898967865842458*^9}, {
   3.8989681763436337`*^9, 3.89896820088093*^9}, 3.898968317060367*^9, {
   3.898968715768503*^9, 3.8989687312627*^9}, {3.898969970934989*^9, 
   3.8989699843133583`*^9}, {3.899284747922751*^9, 3.899284764939288*^9}},
 CellLabel->
  "Out[330]=",ExpressionUUID->"99286ebb-3f0b-4560-8913-816f43b21f5e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TemplateBox[{"0.09", "0.09"},
     "Around"],
    Around[0.09036471586089904, 0.09085668486247596]], ",", 
   RowBox[{"Missing", "[", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.898967843631578*^9, 3.898967865842458*^9}, {
   3.8989681763436337`*^9, 3.89896820088093*^9}, 3.898968317060367*^9, {
   3.898968715768503*^9, 3.8989687312627*^9}, {3.898969970934989*^9, 
   3.8989699843133583`*^9}, {3.899284747922751*^9, 3.899284764967472*^9}},
 CellLabel->
  "Out[331]=",ExpressionUUID->"2f29aaba-4d90-427c-8889-6d01e9892b8b"]
}, Open  ]],

Cell[TextData[{
 "Comment: Plate 4, F10 corresponds to a \[OpenCurlyDoubleQuote]fourth\
\[CloseCurlyDoubleQuote] entry in the triplicate; as noted above, we have \
dropped this point, after discussing with Christelle E. \n\n",
 StyleBox["Comment: ",
  FontWeight->"Bold"],
 " There is still one entry with a large MAD"
}], "Text",
 CellChangeTimes->{{3.898968741173398*^9, 3.898968759908409*^9}, {
  3.8989688598227*^9, 3.898968864926179*^9}, {3.8989700828325777`*^9, 
  3.898970123492846*^9}, {3.899284902934601*^9, 3.899284943234119*^9}, {
  3.89928498188235*^9, 
  3.8992849895835133`*^9}},ExpressionUUID->"f5babc31-e0c0-454a-9c81-\
32d262f7a45d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PositionLargest", "@", "madTriplicates"}]], "Input",
 CellChangeTimes->{{3.898968878965061*^9, 3.898968879599083*^9}, {
  3.898968930690792*^9, 3.8989689498812532`*^9}, {3.8989700068384943`*^9, 
  3.898970032873466*^9}, {3.8992848112201233`*^9, 3.899284839410829*^9}},
 CellLabel->
  "In[334]:=",ExpressionUUID->"206e1cd7-15d7-4b6b-a4b2-fb6301c3b2ed"],

Cell[BoxData[
 RowBox[{"{", "71", "}"}]], "Output",
 CellChangeTimes->{
  3.898968950207706*^9, {3.898970024713995*^9, 3.89897003530133*^9}, {
   3.899284812989843*^9, 3.899284839720809*^9}},
 CellLabel->
  "Out[334]=",ExpressionUUID->"cd7c3b39-94d9-478b-b2cd-60c5259c7d1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"groupTriplicates", "[", 
  RowBox[{"[", "71", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"stdDevTriplicates", "[", 
  RowBox[{"[", "71", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.898969052178487*^9, 3.8989690575768003`*^9}, {
  3.8992848428707457`*^9, 3.8992848506988773`*^9}, {3.8992849567840014`*^9, 
  3.899284975449181*^9}},
 CellLabel->
  "In[339]:=",ExpressionUUID->"9d8cf37a-e27f-4597-a3f4-939e711eecbc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10.81`", ",", "9.41`", ",", "10.67`"}], "}"}]], "Output",
 CellChangeTimes->{{3.898969054400566*^9, 3.898969058298573*^9}, {
  3.899284843449849*^9, 3.899284851149579*^9}, {3.899284971539301*^9, 
  3.899284975770371*^9}},
 CellLabel->
  "Out[339]=",ExpressionUUID->"06105784-3008-4ea1-997b-7599cbc76f4c"],

Cell[BoxData["0.7710598766200544`"], "Output",
 CellChangeTimes->{{3.898969054400566*^9, 3.898969058298573*^9}, {
  3.899284843449849*^9, 3.899284851149579*^9}, {3.899284971539301*^9, 
  3.899284975777638*^9}},
 CellLabel->
  "Out[340]=",ExpressionUUID->"c6933e8b-469a-427e-ba97-64fdb39bc83c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Approach 0: Naive Regressor Model", "Section",
 CellChangeTimes->{{3.89896516344536*^9, 
  3.898965172326872*^9}},ExpressionUUID->"522c2e09-53f6-48b7-becd-\
57a6bf8e6e93"],

Cell[TextData[{
 StyleBox["Motivation:  ",
  FontWeight->"Bold"],
 "Don\[CloseCurlyQuote]t do any data processing or dimensionality reduction \
and just use some"
}], "Text",
 CellChangeTimes->{{3.898965175024678*^9, 
  3.8989652121179*^9}},ExpressionUUID->"268871c4-47b0-45d5-9ebb-23828c542587"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"crossValidate", "[", 
    RowBox[{"data_", ",", "modelType_String"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<CrossValidateModel\>\"", "]"}], "[",
     "\[IndentingNewLine]", 
    RowBox[{"data", ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Predict", "[", 
       RowBox[{"#", ",", 
        RowBox[{"Method", "->", "modelType"}]}], "]"}], "&"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<ValidationFunction\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<MeanDeviation\>\"", ",", "\"\<RSquared\>\""}], "}"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"summarize", "[", 
    RowBox[{"data_", ",", "method_String"}], "]"}], ":=", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"summary", " ", "=", " ", 
       RowBox[{"crossValidate", "[", 
        RowBox[{"data", ",", "method"}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Around", "/@", 
      RowBox[{"Transpose", "@", 
       RowBox[{"summary", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "\"\<ValidationResult\>\""}], "]"}], "]"}]}]}]}],
     "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"regressors", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<LinearRegression\>\"", ",", "\"\<NearestNeighbors\>\"", ",", 
      "\"\<RandomForest\>\"", ",", "\"\<GradientBoostedTrees\>\""}], "}"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Scan", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"results", "[", "#", "]"}], "=", 
      RowBox[{"summarize", "[", 
       RowBox[{"data", ",", "#"}], "]"}]}], ")"}], "&"}], ",", 
   "\[IndentingNewLine]", "regressors"}], " ", 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.898688247132247*^9, 3.898688297225319*^9}, 
   3.8986953758368397`*^9, {3.8989652182205753`*^9, 3.898965251639865*^9}, {
   3.8989654161580257`*^9, 3.898965425171391*^9}, {3.898965675789803*^9, 
   3.898965865504965*^9}, {3.8989659363316708`*^9, 3.898965964131452*^9}, 
   3.898966000313622*^9, 3.898966044790317*^9},
 CellLabel->
  "In[341]:=",ExpressionUUID->"90cfb06f-3599-429c-9ce9-08149cfca993"],

Cell["How are we doing so far?", "Text",
 CellChangeTimes->{{3.8989660790286417`*^9, 
  3.898966081526786*^9}},ExpressionUUID->"ea25f5ff-5d82-4569-a9ac-\
1dda30a17f9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "@", "results"}]], "Input",
 CellChangeTimes->{{3.898966029144573*^9, 3.898966063327757*^9}},
 CellLabel->
  "In[345]:=",ExpressionUUID->"1ee5b0e4-7269-44b8-bd20-c42bf328bed0"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|"pH Sampling Limit" -> {
         Around[0.016354430379746775`, 0.0024502745841178428`], 
         Around[0.9999155655142828, 0.000020081352563486272`]}, 
       "Triplicate Variation Limit" -> {
         Around[0.09036471586089904, 0.09085668486247596], 
         Missing[]}, "LinearRegression" -> {
         Around[0.2951979175191667, 0.04233560494193839], 
         Around[0.9835548914281633, 0.004047143938997238]}, 
       "NearestNeighbors" -> {
         Around[0.246309183941997, 0.03655963970388376], 
         Around[0.9851331903397769, 0.004827953143175666]}, "RandomForest" -> {
         Around[0.6488286554406942, 0.030303522421101986`], 
         Around[0.9354704361203865, 0.004879972991661281]}, 
       "GradientBoostedTrees" -> {
         Around[0.21597352733398667`, 0.032216994745887254`], 
         Around[0.988972945190086, 0.0029147758943472344`]}|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[273.], 
         TypeSystem`PackageScope`UnknownShape[False]]], 6, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "GradientBoostedTrees", "LinearRegression", "NearestNeighbors", 
         "pH Sampling Limit", "RandomForest", "Triplicate Variation Limit"]], 
       
       TypeSystem`Vector[TypeSystem`AnyType, 2], 6], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[273.], 
         TypeSystem`PackageScope`UnknownShape[False]]], 6, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "GradientBoostedTrees", "LinearRegression", "NearestNeighbors", 
         "pH Sampling Limit", "RandomForest", "Triplicate Variation Limit"]], 
       
       TypeSystem`Vector[TypeSystem`AnyType, 2], 6], "Path" -> {}, 
     "DisplayedRowCount" -> 6, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     6, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["pH Sampling Limit", 
                  Style[
                  "pH Sampling Limit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["pH Sampling Limit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["pH Sampling Limit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.016354430379746775`, 0.0024502745841178428`], 
                    Around[0.9999155655142828, 0.000020081352563486272`]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.016354430379746775`, 0.0024502745841178428`], 
                    Around[0.9999155655142828, 0.000020081352563486272`]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["pH Sampling Limit"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["pH Sampling Limit"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Triplicate Variation Limit", 
                  Style[
                  "Triplicate Variation Limit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Triplicate Variation Limit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Triplicate Variation Limit"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.09036471586089904, 0.09085668486247596], 
                    Missing[]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.09036471586089904, 0.09085668486247596], 
                    Missing[]}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Triplicate Variation Limit"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Triplicate Variation Limit"]}, "Item", False], "Mouse"],
               ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["LinearRegression", 
                  Style[
                  "LinearRegression", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LinearRegression"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LinearRegression"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.2951979175191667, 0.04233560494193839], 
                    Around[0.9835548914281633, 0.004047143938997238]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.2951979175191667, 0.04233560494193839], 
                    Around[0.9835548914281633, 0.004047143938997238]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LinearRegression"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LinearRegression"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NearestNeighbors", 
                  Style[
                  "NearestNeighbors", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.246309183941997, 0.03655963970388376], 
                    Around[0.9851331903397769, 0.004827953143175666]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.246309183941997, 0.03655963970388376], 
                    Around[0.9851331903397769, 0.004827953143175666]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["RandomForest", 
                  Style[
                  "RandomForest", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.6488286554406942, 0.030303522421101986`], 
                    Around[0.9354704361203865, 0.004879972991661281]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.6488286554406942, 0.030303522421101986`], 
                    Around[0.9354704361203865, 0.004879972991661281]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GradientBoostedTrees", 
                  Style[
                  "GradientBoostedTrees", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["GradientBoostedTrees"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["GradientBoostedTrees"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.21597352733398667`, 0.032216994745887254`], 
                    Around[0.988972945190086, 0.0029147758943472344`]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.21597352733398667`, 0.032216994745887254`], 
                    Around[0.988972945190086, 0.0029147758943472344`]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["GradientBoostedTrees"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["GradientBoostedTrees"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{486., {87.634033203125, 93.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{486., {87.634033203125, 93.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8989660301383257`*^9, 3.898966063600898*^9}, 
   3.899285030384287*^9},
 CellLabel->
  "Out[345]=",ExpressionUUID->"f7dbc486-4f9b-4df2-911d-89ff5a42a80c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Approach 1:  Principal Components Analysis", "Section",
 CellChangeTimes->{{3.898684977072363*^9, 3.898684989104004*^9}, {
  3.898703515061996*^9, 
  3.8987035156063223`*^9}},ExpressionUUID->"eb37714b-2f62-455e-8a4b-\
ccbbb3b3df22"],

Cell[TextData[{
 StyleBox["Motivation:  ",
  FontWeight->"Bold"],
 "Perform principal components analysis to reduce the dimensionality of the \
problem, then use either linear regression or a nearest-neighbor model to \
assign the pH."
}], "Text",
 CellChangeTimes->{{3.8986881740909033`*^9, 3.898688225154965*^9}, 
   3.898688910759054*^9, {3.898965181266107*^9, 
   3.8989651825245*^9}},ExpressionUUID->"33ec8577-5af7-49a3-8353-\
ca3cd3d1f24d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"pca", "=", 
  RowBox[{"DimensionReduction", "[", 
   RowBox[{
    RowBox[{"data", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
    RowBox[{"Method", "->", "\"\<PrincipalComponentsAnalysis\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"transformedData", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"pca", "[", 
        RowBox[{"entry", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "->", 
       RowBox[{"entry", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"entry", ",", " ", "data"}], "}"}]}], "]"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.898687222669746*^9, 3.898687269669746*^9}, {
   3.8986873582064867`*^9, 3.898687361317307*^9}, {3.898687676517584*^9, 
   3.89868768741341*^9}, 3.898688203332033*^9, 3.898688558023147*^9},
 CellLabel->
  "In[346]:=",ExpressionUUID->"f6e12f12-dbc5-4737-8b74-feb5aec1c4f5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DimensionReducerFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{{{}, {}}, {}, {{}, {}, {
                 GrayLevel[0.7], 
                 AbsoluteThickness[1.8], 
                 Opacity[1.], 
                 LineBox[CompressedData["
1:eJwB8QEO/iFib1JlAgAAAB4AAAACAAAAAAAAAAAAAAAAAAAAAAAAAA3l5opg
ldw/ifaD+DItuD+MkCEodiHjP9qvjCs8v9E/bLbqGG2J5D+WRNoAzOrePxWI
hjT6cuM/qFFV1TM75j8YmI/Y7IHfP/eKfiNPOe0/quVYmD5o1D+ADmRmEGnx
P3eNjU0+TbI/IY3cLB+l8z/z/SDb3KDLv5a/pk3oyvQ/P80MS7g64L+H2H4K
a8b0P9+nsKVohOq/rTamnQZ68z/qrFzHBdfxv6YHIajkDPE/bw9qE5vX9b+Z
SUCP/i3rP/uMEvTgV/m/kzjs/r2F4T/bUNnDc5T7v9G7+cvEhMs/wYIqip+q
/L9jvEi/XoXHvxhoDlvsO/y/eOnDDXz84r8s6yb5EW/6v2qTREHJFe+/UEHO
hnD69r/GEyuZBq31v4JWinxOcPK/c9vQT8is+r8XVSwtro/ov0knBpVW9/6/
yZ09iVcE1b9l2NyAUeAAwDbV0T76Ar4/Y701SKBwAcCmV9X1r7fjP9Pdwu5B
LgHAhEmFnNot8T/aVnzNXBkAwIeJGWTe4Pc/Fl/LTVCK/L9n/YLkNTv+P27f
ThBa+/a/DjFFsd98AUAQoc+DuIDwv00y1JUAQgNAdLxOLvHB4L8FJ/Yfkw0E
QHdYowipHsa8z+n67g==
                  "]]}}, {}, {{{}, {}, {}, {}}, {}}}, {{{}, {}}, {}, {{}, 
                GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQvSOde+X6LwX2L+JEV934or//a9ba9rVPHto/qNs+
h/vZZfumRXKlmjWP7f94fAgTnPDcnk/kyM/O5Bf27XmKKav2f7HfXXOp8OzR
U/ZfddfwhpR8tH/Mf1NimfrD/bmrPms6/Ptsv6/iJO/vs5/3+3H82Z7G+Nqe
6/yMbVMP/dhfKsm+/u3U5/bzr9z7quHMeMBGKvy71POz+5PZdsQbTf23/7d6
VqJF6pf9/teV3u88/Hn/ux/vv2b//bTftGfJ25NKr/eXHb7jHVj0Y39nSUKD
+sIl9od7wyt357EeyI75vbEl+Jl9xCWXx0L8f/a7XHD6XCLA4HD6j8KD5/N+
7l/dca7ELo3ZwUXo+W6J9/f2j3T/AwAmeB/L
                 "], {{}, {
                   GrayLevel[0.5], 
                   PointSize[0.12], 
                   AbsoluteThickness[1.6], 
                   
                   PointBox[{17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
                    29, 30, 31, 
                    32}]}, {}}], {}}, {}, {}, {{{}, {}, {}, {}}, {}}}}, 
             ImagePadding -> 0.2, PlotRange -> {{-3.1, 3.2}, {-3.5, 2.1}}, 
             PlotRangePadding -> Automatic, PlotRangeClipping -> True, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "41"}, 
                    "RowWithSeparators"], "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Output dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{{{}, {}}, {}, {{}, {}, {
                 GrayLevel[0.7], 
                 AbsoluteThickness[1.8], 
                 Opacity[1.], 
                 LineBox[CompressedData["
1:eJwB8QEO/iFib1JlAgAAAB4AAAACAAAAAAAAAAAAAAAAAAAAAAAAAA3l5opg
ldw/ifaD+DItuD+MkCEodiHjP9qvjCs8v9E/bLbqGG2J5D+WRNoAzOrePxWI
hjT6cuM/qFFV1TM75j8YmI/Y7IHfP/eKfiNPOe0/quVYmD5o1D+ADmRmEGnx
P3eNjU0+TbI/IY3cLB+l8z/z/SDb3KDLv5a/pk3oyvQ/P80MS7g64L+H2H4K
a8b0P9+nsKVohOq/rTamnQZ68z/qrFzHBdfxv6YHIajkDPE/bw9qE5vX9b+Z
SUCP/i3rP/uMEvTgV/m/kzjs/r2F4T/bUNnDc5T7v9G7+cvEhMs/wYIqip+q
/L9jvEi/XoXHvxhoDlvsO/y/eOnDDXz84r8s6yb5EW/6v2qTREHJFe+/UEHO
hnD69r/GEyuZBq31v4JWinxOcPK/c9vQT8is+r8XVSwtro/ov0knBpVW9/6/
yZ09iVcE1b9l2NyAUeAAwDbV0T76Ar4/Y701SKBwAcCmV9X1r7fjP9Pdwu5B
LgHAhEmFnNot8T/aVnzNXBkAwIeJGWTe4Pc/Fl/LTVCK/L9n/YLkNTv+P27f
ThBa+/a/DjFFsd98AUAQoc+DuIDwv00y1JUAQgNAdLxOLvHB4L8FJ/Yfkw0E
QHdYowipHsa8z+n67g==
                  "]]}}, {}, {{{}, {}, {}, {}}, {}}}, {{{}, {}}, {}, {{}, 
                GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQvSOde+X6LwX2L+JEV934or//a9ba9rVPHto/qNs+
h/vZZfumRXKlmjWP7f94fAgTnPDcnk/kyM/O5Bf27XmKKav2f7HfXXOp8OzR
U/ZfddfwhpR8tH/Mf1NimfrD/bmrPms6/Ptsv6/iJO/vs5/3+3H82Z7G+Nqe
6/yMbVMP/dhfKsm+/u3U5/bzr9z7quHMeMBGKvy71POz+5PZdsQbTf23/7d6
VqJF6pf9/teV3u88/Hn/ux/vv2b//bTftGfJ25NKr/eXHb7jHVj0Y39nSUKD
+sIl9od7wyt357EeyI75vbEl+Jl9xCWXx0L8f/a7XHD6XCLA4HD6j8KD5/N+
7l/dca7ELo3ZwUXo+W6J9/f2j3T/AwAmeB/L
                 "], {{}, {
                   GrayLevel[0.5], 
                   PointSize[0.12], 
                   AbsoluteThickness[1.6], 
                   
                   PointBox[{17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
                    29, 30, 31, 
                    32}]}, {}}], {}}, {}, {}, {{{}, {}, {}, {}}, {}}}}, 
             ImagePadding -> 0.2, PlotRange -> {{-3.1, 3.2}, {-3.5, 2.1}}, 
             PlotRangePadding -> Automatic, PlotRangeClipping -> True, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "41"}, 
                    "RowWithSeparators"], "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Output dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PrincipalComponentsAnalysis\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["393", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  DimensionReducerFunction[<|
   "ExampleNumber" -> 393, "Imputer" -> 
    MachineLearning`MLProcessor[
     "ImputeMissing", <|
      "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
       "StructurePreserving" -> True, 
       "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
       "Fill" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAADr+IyaQvaYP1B+Ikr8lJo/w2I+p0a8nD9T
KCIOwg+fPy3MMC5n96A/rvbdFiLOoT9Y7Bja73miP2VhZiOi0KI/P/DBjHzW
oj/dKJRSR9GiP6tarVipqKI/Auxm5308oj/lkwd8GpyhP3/VSz0SvaA/mSbe
ypEKoD/ptng3AF2fP/kJdKWF4p8/pXUTsbGloD+R2RDbmKShP7VSGMZ0W6M/
NJcl1XkRpT/rsDQr0O2kP0dpEGqcH6I/T0unHTEJnz8C5iu6DracP+zdoQgi
BJ0/UAIwa9KrnT/yICTddeCcP19MCv+vIxHADJx6oQMuEsCgKbc+sHgTwLk3
U9JEJhXAJcjDfcPcdD8Gw3pl00hmP26252fcZFg/iKooC/5YST9XPMXSBIs6
P5cVBwjrVSw/5a4WO29PGz+lkPWN5pwoP051NsgpmSU/xrWYuQ==
        "], "Method" -> "Naive", "VectorLength" -> 41, 
       "Output" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
        "Type" -> "NumericalVector"|>], "RandomImputer" -> 
    MachineLearning`MLProcessor[
     "ImputeMissing", <|
      "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
       "StructurePreserving" -> True, 
       "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
       "Mean" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAADr+IyaQvaYP1B+Ikr8lJo/w2I+p0a8nD9T
KCIOwg+fPy3MMC5n96A/rvbdFiLOoT9Y7Bja73miP2VhZiOi0KI/P/DBjHzW
oj/dKJRSR9GiP6tarVipqKI/Auxm5308oj/lkwd8GpyhP3/VSz0SvaA/mSbe
ypEKoD/ptng3AF2fP/kJdKWF4p8/pXUTsbGloD+R2RDbmKShP7VSGMZ0W6M/
NJcl1XkRpT/rsDQr0O2kP0dpEGqcH6I/T0unHTEJnz8C5iu6DracP+zdoQgi
BJ0/UAIwa9KrnT/yICTddeCcP19MCv+vIxHADJx6oQMuEsCgKbc+sHgTwLk3
U9JEJhXAJcjDfcPcdD8Gw3pl00hmP26252fcZFg/iKooC/5YST9XPMXSBIs6
P5cVBwjrVSw/5a4WO29PGz+lkPWN5pwoP051NsgpmSU/xrWYuQ==
        "], "StandardDeviation" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAADyVTEhWeN8P3Zqd1tEenQ/d+gRzFEDdD+F
jYyo7uF4PzMpZdXHTIA/amoNK3r+gz++939qi/2HP1Bo3QD4dos/H2oG/+GU
jT+t1KsTwtyOP4vzCcVgjY4/CTUvue4sjT+chZC4QqyLP9Bwcn8o54o/gTnC
VpBHiz/mw3IXVlOMP7Ex0lRDZY0/GEmND+h/jT8H7VdXXNuMP+fO9n9J/44/
IENoYb8Mkj9u8Dx0r7SRP4x56DSAd4s/s3S+dItWiT/0Q/UzcciNP9d72HjN
hJE/ygA1MJ9qkz+TCABahOyTP8Z1M+xLf/Y/ArRZgz1h9z+rUMzBwNf2P5Ma
Wiv4b/U/ituX0SftaT+mXngm5wJaP+cAodzvLU8/5Mr7hCPYRT+b3yWdjDtC
P6o2roggdTo/8pY9hYV5Mj/y+WNFMQkxPzJkoMV61C0/iyafSQ==
        "], "Method" -> "NaiveSampler", "VectorLength" -> 41, 
       "Output" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
        "Type" -> "NumericalVector"|>], "Preprocessor" -> 
    MachineLearning`MLProcessor[
     "ToMLDataset", <|
      "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Length" -> 41|>|>, 
       "Output" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
        "Preprocessor" -> 
       MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor[
            "WrapMLDataset", <|
             "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
              "RawExample" -> Missing["KeyAbsent", "RawExample"], 
              "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> True, 
       "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
       "Missing" -> "Allowed"|>], "Processor" -> 
    MachineLearning`MLProcessor[
     "LogTransformNumericalVector", <|
      "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
       "StructurePreserving" -> True, 
       "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
       "Indices" -> {29, 30, 31, 32}, 
       "Output" -> <|
        "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>|>], 
    "Model" -> <|"Matrix" -> CompressedData["
1:eJwBoQJe/SFib1JlAgAAACkAAAACAAAAtjJVE02gx7+ZwCUM5XGgP9irWMIY
oca/8pD9BsbiwD8mvKRFObG+v7nk+MTCu8w/GFSdvB7qs7+t+PhFI27QP1bu
OK/6Ebm/DeIsR0lA0D+f/wwNzG7Av5odAhzA280/YxjJwl0ixL9KkYIkjZPJ
P8s7nnFh0sa/pfvCmXHixD/YSBfGgUfIv83k3c8eYsE/F1Sgfy1tyb93m1Mc
QoK7P7Nuw2IbMcq/pEo8tXG5tD9/CmFAcdHKv5D/hmoSKqc/mr1JHWz4yr9N
uYP0nf56vxM76a4YuMm/ECziLeKOtL9SDpqH9BHHvxYs9PlUsMK/1VfJFgcN
w7+5nE9POj3Kv7gHMGZQyry/LuwFdzXvz78LkvZRpI6yv6xgNN6i7dG/vCIU
3xZikb/69vGG2wbTv4yOMqx7Ea8/AQ3wvAW10b8HkWC2zOm7P0YxNMLL5c2/
yVgaujcfwj8YmBYPEiLJvytZonljocc/kkdxiz5Awb+2oV7WPjXLPx05NX6q
+JO/dZTPFY5+yj9zNflSzMywP8WufVxqksk/Px1W4EkTuT8txTPHgQTJP2B6
AEB4l7w/4tcKGjKYyD9+uLkMK5W+P0NLmgCneMc/FnsptOm9wT8fCt9TlRLH
P230/B2ZRsI/bIjtHmUHxz80+pjrMdvBP+X32bRJEsc/WAbC4mb7wD84XdLh
uP7HP/WsFCR3DsA/tvsThzwkxj/uByMMk728P3SNYAcavsA/I8UrqKsysz+J
jJOixCytP4DfnJcj25U/EMyrOtjBDD9KIh4Ij7h3v6gE1SHnEp+/hJ4sq3Lh
nb/2phqlqUerv9t8P0fgoKC/i1kH4vyfub8GcxQvIRyUv0wm55LJfLm/Lg3C
J5LTfD/zA0/n
       "], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
          "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAADr+IyaQvaYP1B+Ikr8lJo/w2I+p0a8nD9T
KCIOwg+fPy3MMC5n96A/rvbdFiLOoT9Y7Bja73miP2VhZiOi0KI/P/DBjHzW
oj/dKJRSR9GiP6tarVipqKI/Auxm5308oj/lkwd8GpyhP3/VSz0SvaA/mSbe
ypEKoD/ptng3AF2fP/kJdKWF4p8/pXUTsbGloD+R2RDbmKShP7VSGMZ0W6M/
NJcl1XkRpT/rsDQr0O2kP0dpEGqcH6I/T0unHTEJnz8C5iu6DracP+zdoQgi
BJ0/UAIwa9KrnT/yICTddeCcP19MCv+vIxHADJx6oQMuEsCgKbc+sHgTwLk3
U9JEJhXAJcjDfcPcdD8Gw3pl00hmP26252fcZFg/iKooC/5YST9XPMXSBIs6
P5cVBwjrVSw/5a4WO29PGz+lkPWN5pwoP051NsgpmSU/xrWYuQ==
              "], "StandardDeviation" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAADyVTEhWeN8P3Zqd1tEenQ/d+gRzFEDdD+F
jYyo7uF4PzMpZdXHTIA/amoNK3r+gz++939qi/2HP1Bo3QD4dos/H2oG/+GU
jT+t1KsTwtyOP4vzCcVgjY4/CTUvue4sjT+chZC4QqyLP9Bwcn8o54o/gTnC
VpBHiz/mw3IXVlOMP7Ex0lRDZY0/GEmND+h/jT8H7VdXXNuMP+fO9n9J/44/
IENoYb8Mkj9u8Dx0r7SRP4x56DSAd4s/s3S+dItWiT/0Q/UzcciNP9d72HjN
hJE/ygA1MJ9qkz+TCABahOyTP8Z1M+xLf/Y/ArRZgz1h9z+rUMzBwNf2P5Ma
Wiv4b/U/ituX0SftaT+mXngm5wJaP+cAodzvLU8/5Mr7hCPYRT+b3yWdjDtC
P6o2roggdTo/8pY9hYV5Mj/y+WNFMQkxPzJkoMV61C0/iyafSQ==
              "], 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "FinalDimension" -> 2, "Padder" -> 
      MachineLearning`MLProcessor["Identity"], "Method" -> 
      "PrincipalComponentsAnalysis"|>, "PerformanceGoal" -> Automatic, 
    "Invertibility" -> "Approximate", 
    "Log" -> <|
     "TrainingTime" -> 0.035366, "MaxTrainingMemory" -> 606016, "DataMemory" -> 
      194984, "FunctionMemory" -> 27440, "LanguageVersion" -> {13.2, 1}, 
      "Date" -> DateObject[{2023, 7, 25, 10, 43, 50.727533`8.457818717584656},
         "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.898688555156459*^9, 3.898702082910101*^9, 
  3.8987022319011106`*^9, 3.898964987807252*^9, 3.899285030806341*^9},
 CellLabel->
  "Out[346]=",ExpressionUUID->"8856c1ca-fc2b-43a2-8260-afa7fac6508a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Scan", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"results", "[", 
        RowBox[{"#", "<>", "\"\<+ PCA\>\""}], "]"}], "=", 
       RowBox[{"summarize", "[", 
        RowBox[{"transformedData", ",", "#"}], "]"}]}], ")"}], "&"}], ",", 
    "\[IndentingNewLine]", "regressors"}], " ", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Dataset", "[", "results", "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.898966095247011*^9, 3.8989661326708603`*^9}},
 CellLabel->
  "In[348]:=",ExpressionUUID->"99f4d45d-e983-4239-bc71-ef614dc001d9"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|"pH Sampling Limit" -> {
         Around[0.016354430379746775`, 0.0024502745841178428`], 
         Around[0.9999155655142828, 0.000020081352563486272`]}, 
       "Triplicate Variation Limit" -> {
         Around[0.09036471586089904, 0.09085668486247596], 
         Missing[]}, "LinearRegression" -> {
         Around[0.2951979175191667, 0.04233560494193839], 
         Around[0.9835548914281633, 0.004047143938997238]}, 
       "NearestNeighbors" -> {
         Around[0.246309183941997, 0.03655963970388376], 
         Around[0.9851331903397769, 0.004827953143175666]}, "RandomForest" -> {
         Around[0.6488286554406942, 0.030303522421101986`], 
         Around[0.9354704361203865, 0.004879972991661281]}, 
       "GradientBoostedTrees" -> {
         Around[0.21597352733398667`, 0.032216994745887254`], 
         Around[0.988972945190086, 0.0029147758943472344`]}, 
       "LinearRegression+ PCA" -> {
         Around[1.319377930678673, 0.06857143838912945], 
         Around[0.7612779463107979, 0.030953186238664242`]}, 
       "NearestNeighbors+ PCA" -> {
         Around[0.3317579341116636, 0.07009821922043007], 
         Around[0.9682711884746877, 0.012538936418595789`]}, 
       "RandomForest+ PCA" -> {
         Around[0.7292895909616282, 0.027744907880589302`], 
         Around[0.9090906072868623, 0.01733291920719]}, 
       "GradientBoostedTrees+ PCA" -> {
         Around[0.37406112094319194`, 0.07208558920587987], 
         Around[0.9636712351472212, 0.01191930914702032]}|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[273.], 
         TypeSystem`PackageScope`UnknownShape[False]]], 10, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "GradientBoostedTrees", "GradientBoostedTrees+ PCA", 
         "LinearRegression", "LinearRegression+ PCA", "NearestNeighbors", 
         "NearestNeighbors+ PCA", "pH Sampling Limit", "RandomForest", 
         "RandomForest+ PCA", "Triplicate Variation Limit"]], 
       TypeSystem`Vector[TypeSystem`AnyType, 2], 10], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[273.], 
         TypeSystem`PackageScope`UnknownShape[False]]], 10, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "GradientBoostedTrees", "GradientBoostedTrees+ PCA", 
         "LinearRegression", "LinearRegression+ PCA", "NearestNeighbors", 
         "NearestNeighbors+ PCA", "pH Sampling Limit", "RandomForest", 
         "RandomForest+ PCA", "Triplicate Variation Limit"]], 
       TypeSystem`Vector[TypeSystem`AnyType, 2], 10], "Path" -> {}, 
     "DisplayedRowCount" -> 10, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     10, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["pH Sampling Limit", 
                  Style[
                  "pH Sampling Limit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["pH Sampling Limit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["pH Sampling Limit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.016354430379746775`, 0.0024502745841178428`], 
                    Around[0.9999155655142828, 0.000020081352563486272`]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.016354430379746775`, 0.0024502745841178428`], 
                    Around[0.9999155655142828, 0.000020081352563486272`]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["pH Sampling Limit"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["pH Sampling Limit"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Triplicate Variation Limit", 
                  Style[
                  "Triplicate Variation Limit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Triplicate Variation Limit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Triplicate Variation Limit"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.09036471586089904, 0.09085668486247596], 
                    Missing[]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.09036471586089904, 0.09085668486247596], 
                    Missing[]}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Triplicate Variation Limit"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Triplicate Variation Limit"]}, "Item", False], "Mouse"],
               ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["LinearRegression", 
                  Style[
                  "LinearRegression", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LinearRegression"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LinearRegression"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.2951979175191667, 0.04233560494193839], 
                    Around[0.9835548914281633, 0.004047143938997238]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.2951979175191667, 0.04233560494193839], 
                    Around[0.9835548914281633, 0.004047143938997238]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LinearRegression"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LinearRegression"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NearestNeighbors", 
                  Style[
                  "NearestNeighbors", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.246309183941997, 0.03655963970388376], 
                    Around[0.9851331903397769, 0.004827953143175666]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.246309183941997, 0.03655963970388376], 
                    Around[0.9851331903397769, 0.004827953143175666]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["RandomForest", 
                  Style[
                  "RandomForest", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.6488286554406942, 0.030303522421101986`], 
                    Around[0.9354704361203865, 0.004879972991661281]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.6488286554406942, 0.030303522421101986`], 
                    Around[0.9354704361203865, 0.004879972991661281]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GradientBoostedTrees", 
                  Style[
                  "GradientBoostedTrees", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["GradientBoostedTrees"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["GradientBoostedTrees"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.21597352733398667`, 0.032216994745887254`], 
                    Around[0.988972945190086, 0.0029147758943472344`]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.21597352733398667`, 0.032216994745887254`], 
                    Around[0.988972945190086, 0.0029147758943472344`]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["GradientBoostedTrees"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["GradientBoostedTrees"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["LinearRegression+ PCA", 
                  Style[
                  "LinearRegression+ PCA", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LinearRegression+ PCA"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LinearRegression+ PCA"]}, "RowHeader", False], "Mouse"],
               ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[1.319377930678673, 0.06857143838912945], 
                    Around[0.7612779463107979, 0.030953186238664242`]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[1.319377930678673, 0.06857143838912945], 
                    Around[0.7612779463107979, 0.030953186238664242`]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LinearRegression+ PCA"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LinearRegression+ PCA"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NearestNeighbors+ PCA", 
                  Style[
                  "NearestNeighbors+ PCA", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors+ PCA"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors+ PCA"]}, "RowHeader", False], "Mouse"],
               ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.3317579341116636, 0.07009821922043007], 
                    Around[0.9682711884746877, 0.012538936418595789`]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.3317579341116636, 0.07009821922043007], 
                    Around[0.9682711884746877, 0.012538936418595789`]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors+ PCA"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors+ PCA"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["RandomForest+ PCA", 
                  Style[
                  "RandomForest+ PCA", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest+ PCA"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest+ PCA"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.7292895909616282, 0.027744907880589302`], 
                    Around[0.9090906072868623, 0.01733291920719]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.7292895909616282, 0.027744907880589302`], 
                    Around[0.9090906072868623, 0.01733291920719]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest+ PCA"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest+ PCA"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GradientBoostedTrees+ PCA", 
                  Style[
                  "GradientBoostedTrees+ PCA", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["GradientBoostedTrees+ PCA"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["GradientBoostedTrees+ PCA"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.37406112094319194`, 0.07208558920587987], 
                    Around[0.9636712351472212, 0.01191930914702032]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.37406112094319194`, 0.07208558920587987], 
                    Around[0.9636712351472212, 0.01191930914702032]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["GradientBoostedTrees+ PCA"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["GradientBoostedTrees+ PCA"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{486., {141.634033203125, 147.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{486., {141.634033203125, 147.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.898966143316471*^9, 3.899285058625877*^9},
 CellLabel->
  "Out[349]=",ExpressionUUID->"3e3624fa-055a-4b0b-8531-f4476625cc29"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Conclusion: ",
  FontWeight->"Bold"],
 " PCA doesn\[CloseCurlyQuote]t help us tremendously...we\[CloseCurlyQuote]ve \
now go enough examples to learn from the data"
}], "Text",
 CellChangeTimes->{{3.89868848873427*^9, 3.898688646654128*^9}, {
  3.898694614959653*^9, 3.898694661902998*^9}, {3.898702261984062*^9, 
  3.898702268199959*^9}, {3.898965085544178*^9, 3.8989651297160997`*^9}, {
  3.898965376556888*^9, 3.898965402439321*^9}, {3.898966154919242*^9, 
  3.898966185433318*^9}, {3.898966338410466*^9, 
  3.898966345636197*^9}},ExpressionUUID->"d7a9b6a2-af6d-4743-9ba0-\
77b4a6d7ad96"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Approach 2:  Optimal Transport Classifier", "Section",
 CellChangeTimes->{{3.898688658894486*^9, 
  3.898688664398024*^9}},ExpressionUUID->"3cd55a60-d3fe-4071-a2d9-\
d4a5b429d367"],

Cell[TextData[{
 StyleBox["Concept: ",
  FontWeight->"Bold"],
 " Try to find the most similar spectrum (by Earth Mover Distance, aka W1 \
Wasserstein metric) and assign that pH to the unknown spectrum.\n\nFurther \
reading:\nSee:  https://en.wikipedia.org/wiki/Earth_mover%27s_distance\nSee: ",
 StyleBox["JCP 2021",
  FontSlant->"Italic"],
 " https://doi.org/10.1063/5.0069681\nSee: ",
 StyleBox["JCP",
  FontSlant->"Italic"],
 " 2022 https://doi.org/10.1063/5.0087385 "
}], "Text",
 CellChangeTimes->{{3.898692747236281*^9, 3.898692783700234*^9}, {
   3.898692949011818*^9, 3.898692951548645*^9}, {3.898702380951612*^9, 
   3.898702418383383*^9}, 
   3.8987035325340767`*^9},ExpressionUUID->"c9196d79-53ca-43a6-9487-\
e44be5930ced"],

Cell[BoxData[
 RowBox[{"<<", "\"\<src/emd.wl\>\"", " ", 
  RowBox[{"(*", 
   RowBox[{
   "import", " ", "the", " ", "earth", " ", "mover", " ", "distance", " ", 
    "code"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.8986944209200487`*^9, 3.898694424551083*^9}, {
  3.898695781280542*^9, 3.898695786549046*^9}, {3.898701369923987*^9, 
  3.898701370483572*^9}},
 CellLabel->
  "In[350]:=",ExpressionUUID->"64a6599b-44de-44a7-be44-46e1146eee21"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "define", " ", "a", " ", "function", " ", "for", " ", "model", " ", 
     "validation", " ", "during", " ", "CV"}], ",", " ", 
    RowBox[{
     RowBox[{
     "as", " ", "EMD", " ", "is", " ", "not", " ", "a", " ", "built"}], "-", 
     RowBox[{"in", " ", "classifier"}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"validation", "[", 
     RowBox[{"model_NearestFunction", ",", "validationData_List"}], "]"}], ":=", 
    RowBox[{"With", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"obs", "=", 
         RowBox[{"validationData", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"predicted", " ", "=", " ", 
         RowBox[{
          RowBox[{"model", "/@", 
           RowBox[{"validationData", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "//", "Flatten"}]}]}],
        "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Mean", "@", 
         RowBox[{"Abs", "[", 
          RowBox[{"obs", "-", "predicted"}], "]"}]}], ",", " ", 
        RowBox[{
         RowBox[{"Correlation", "[", 
          RowBox[{"obs", ",", "predicted"}], "]"}], "^", "2"}]}], "}"}]}], 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"perform", " ", "5"}], "-", 
     RowBox[{
     "fold", " ", "cross", " ", "validation", " ", "of", " ", "the", " ", 
      "EMD", " ", "model"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cvEMDSummary", "=", 
     RowBox[{
      RowBox[{"ResourceFunction", "[", "\"\<CrossValidateModel\>\"", "]"}], 
      "[", "\[IndentingNewLine]", 
      RowBox[{"data", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Nearest", "[", 
         RowBox[{"#", ",", 
          RowBox[{"DistanceFunction", "->", "emd"}]}], "]"}], "&"}], ",", " ", 
       RowBox[{"(*", 
        RowBox[{"model", " ", "definition"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"\"\<ValidationFunction\>\"", "->", "validation"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<ParallelQ\>\"", "->", "True"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"collect", " ", "summary", " ", "statistics"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"results", "[", "\"\<EMD\>\"", "]"}], "=", 
    RowBox[{"Around", "/@", 
     RowBox[{"Transpose", "@", 
      RowBox[{"%", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<ValidationResult\>\""}], "]"}], 
       "]"}]}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.898695363057292*^9, 3.898695397728511*^9}, {
  3.898695514615293*^9, 3.898695547751058*^9}, {3.898695601958559*^9, 
  3.898695633854141*^9}, {3.8986956882704353`*^9, 3.898695706734109*^9}, {
  3.898695815199388*^9, 3.898695815372982*^9}, {3.898695858556755*^9, 
  3.898695865292941*^9}, {3.898695983075714*^9, 3.8986963746798677`*^9}, {
  3.898696415303406*^9, 3.898696418913911*^9}, {3.898696627543304*^9, 
  3.8986967220609617`*^9}, {3.898701422957809*^9, 3.8987014559703407`*^9}, {
  3.898703144106369*^9, 3.8987031545459557`*^9}, {3.898703597750123*^9, 
  3.898703604317762*^9}, {3.8989653103048687`*^9, 3.898965312800641*^9}, {
  3.898966385238943*^9, 3.898966494051755*^9}, {3.898966546606967*^9, 
  3.898966572101944*^9}},
 CellLabel->
  "In[351]:=",ExpressionUUID->"f28e6b96-6714-4946-8eee-87ffefc1f2ea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TemplateBox[{"0.23", "0.04"},
     "Around"],
    Around[0.22813080168776373`, 0.03609309483574532]], ",", 
   InterpretationBox[
    TemplateBox[{"0.984", "0.007"},
     "Around"],
    Around[0.9840035865400886, 0.006987068157522]]}], "}"}]], "Output",
 CellChangeTimes->{3.8992857314203157`*^9},
 CellLabel->
  "Out[353]=",ExpressionUUID->"9eee6111-2ab2-4852-87e1-3f7103fc5c32"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Comment:",
  FontWeight->"Bold"],
 "  The na\[IDoubleDot]ve EMD implementation is a bit slow after you have \
about 100 examples in the dataset, as it is brute forcing all the pairwise \
comparisons (ugh, quadratic scaling).  Running cross validation with the full \
dataset takes about 10 minutes on my laptop (but part of this is definitely \
my laptop thermal throttling itself, and part of it is dividing 5 tasks over \
4 kernels, so we hang on the remaining job). There are smarter ways to do \
this calculation, if we want to go down this path in the future ..."
}], "Text",
 CellChangeTimes->{{3.898696725843224*^9, 3.898696757595469*^9}, {
  3.8987022876167307`*^9, 3.898702303848242*^9}, {3.898703037265913*^9, 
  3.898703040562002*^9}, {3.898966586238345*^9, 3.898966695588264*^9}, {
  3.8989667418754683`*^9, 3.898966790266779*^9}, {3.8989668673115673`*^9, 
  3.898966881864175*^9}, {3.898966964396493*^9, 3.898967032094501*^9}, {
  3.899285602136517*^9, 
  3.8992856033562098`*^9}},ExpressionUUID->"4056c1a5-8e06-488f-8437-\
d2ce553e8b5f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion items and next steps", "Section",
 CellChangeTimes->{{3.898701612342209*^9, 
  3.8987016343579597`*^9}},ExpressionUUID->"f85d76b2-b1ca-4a4d-8500-\
d7a09779c8c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "@", 
  RowBox[{"Sort", "@", "results"}]}]], "Input",
 CellChangeTimes->{{3.898966791593011*^9, 3.898966820905403*^9}},
 CellLabel->
  "In[355]:=",ExpressionUUID->"88b3bb1e-ed4d-49b3-b2cb-c5cebeb7c65c"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|"pH Sampling Limit" -> {
         Around[0.016354430379746775`, 0.0024502745841178428`], 
         Around[0.9999155655142828, 0.000020081352563486272`]}, 
       "Triplicate Variation Limit" -> {
         Around[0.09036471586089904, 0.09085668486247596], 
         Missing[]}, "GradientBoostedTrees" -> {
         Around[0.21597352733398667`, 0.032216994745887254`], 
         Around[0.988972945190086, 0.0029147758943472344`]}, "EMD" -> {
         Around[0.22813080168776373`, 0.03609309483574532], 
         Around[0.9840035865400886, 0.006987068157522]}, "NearestNeighbors" -> {
         Around[0.246309183941997, 0.03655963970388376], 
         Around[0.9851331903397769, 0.004827953143175666]}, 
       "LinearRegression" -> {
         Around[0.2951979175191667, 0.04233560494193839], 
         Around[0.9835548914281633, 0.004047143938997238]}, 
       "NearestNeighbors+ PCA" -> {
         Around[0.3317579341116636, 0.07009821922043007], 
         Around[0.9682711884746877, 0.012538936418595789`]}, 
       "GradientBoostedTrees+ PCA" -> {
         Around[0.37406112094319194`, 0.07208558920587987], 
         Around[0.9636712351472212, 0.01191930914702032]}, 
       "RandomForest" -> {
         Around[0.6488286554406942, 0.030303522421101986`], 
         Around[0.9354704361203865, 0.004879972991661281]}, 
       "RandomForest+ PCA" -> {
         Around[0.7292895909616282, 0.027744907880589302`], 
         Around[0.9090906072868623, 0.01733291920719]}, 
       "LinearRegression+ PCA" -> {
         Around[1.319377930678673, 0.06857143838912945], 
         Around[0.7612779463107979, 0.030953186238664242`]}|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[273.], 
         TypeSystem`PackageScope`UnknownShape[False]]], 11, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "EMD", "GradientBoostedTrees", "GradientBoostedTrees+ PCA", 
         "LinearRegression", "LinearRegression+ PCA", "NearestNeighbors", 
         "NearestNeighbors+ PCA", "pH Sampling Limit", "RandomForest", 
         "RandomForest+ PCA", "Triplicate Variation Limit"]], 
       TypeSystem`Vector[TypeSystem`AnyType, 2], 11], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[273.], 
         TypeSystem`PackageScope`UnknownShape[False]]], 11, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "EMD", "GradientBoostedTrees", "GradientBoostedTrees+ PCA", 
         "LinearRegression", "LinearRegression+ PCA", "NearestNeighbors", 
         "NearestNeighbors+ PCA", "pH Sampling Limit", "RandomForest", 
         "RandomForest+ PCA", "Triplicate Variation Limit"]], 
       TypeSystem`Vector[TypeSystem`AnyType, 2], 11], "Path" -> {}, 
     "DisplayedRowCount" -> 11, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     11, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["pH Sampling Limit", 
                  Style[
                  "pH Sampling Limit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["pH Sampling Limit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["pH Sampling Limit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.016354430379746775`, 0.0024502745841178428`], 
                    Around[0.9999155655142828, 0.000020081352563486272`]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.016354430379746775`, 0.0024502745841178428`], 
                    Around[0.9999155655142828, 0.000020081352563486272`]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["pH Sampling Limit"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["pH Sampling Limit"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Triplicate Variation Limit", 
                  Style[
                  "Triplicate Variation Limit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Triplicate Variation Limit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Triplicate Variation Limit"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.09036471586089904, 0.09085668486247596], 
                    Missing[]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.09036471586089904, 0.09085668486247596], 
                    Missing[]}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Triplicate Variation Limit"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Triplicate Variation Limit"]}, "Item", False], "Mouse"],
               ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GradientBoostedTrees", 
                  Style[
                  "GradientBoostedTrees", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["GradientBoostedTrees"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["GradientBoostedTrees"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.21597352733398667`, 0.032216994745887254`], 
                    Around[0.988972945190086, 0.0029147758943472344`]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.21597352733398667`, 0.032216994745887254`], 
                    Around[0.988972945190086, 0.0029147758943472344`]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["GradientBoostedTrees"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["GradientBoostedTrees"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["EMD", 
                  Style[
                  "EMD", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["EMD"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["EMD"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.22813080168776373`, 0.03609309483574532], 
                    Around[0.9840035865400886, 0.006987068157522]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.22813080168776373`, 0.03609309483574532], 
                    Around[0.9840035865400886, 0.006987068157522]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["EMD"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["EMD"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NearestNeighbors", 
                  Style[
                  "NearestNeighbors", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.246309183941997, 0.03655963970388376], 
                    Around[0.9851331903397769, 0.004827953143175666]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.246309183941997, 0.03655963970388376], 
                    Around[0.9851331903397769, 0.004827953143175666]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["LinearRegression", 
                  Style[
                  "LinearRegression", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LinearRegression"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LinearRegression"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.2951979175191667, 0.04233560494193839], 
                    Around[0.9835548914281633, 0.004047143938997238]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.2951979175191667, 0.04233560494193839], 
                    Around[0.9835548914281633, 0.004047143938997238]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LinearRegression"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LinearRegression"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NearestNeighbors+ PCA", 
                  Style[
                  "NearestNeighbors+ PCA", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors+ PCA"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors+ PCA"]}, "RowHeader", False], "Mouse"],
               ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.3317579341116636, 0.07009821922043007], 
                    Around[0.9682711884746877, 0.012538936418595789`]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.3317579341116636, 0.07009821922043007], 
                    Around[0.9682711884746877, 0.012538936418595789`]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors+ PCA"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors+ PCA"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GradientBoostedTrees+ PCA", 
                  Style[
                  "GradientBoostedTrees+ PCA", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["GradientBoostedTrees+ PCA"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["GradientBoostedTrees+ PCA"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.37406112094319194`, 0.07208558920587987], 
                    Around[0.9636712351472212, 0.01191930914702032]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.37406112094319194`, 0.07208558920587987], 
                    Around[0.9636712351472212, 0.01191930914702032]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["GradientBoostedTrees+ PCA"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["GradientBoostedTrees+ PCA"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["RandomForest", 
                  Style[
                  "RandomForest", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.6488286554406942, 0.030303522421101986`], 
                    Around[0.9354704361203865, 0.004879972991661281]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.6488286554406942, 0.030303522421101986`], 
                    Around[0.9354704361203865, 0.004879972991661281]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["RandomForest+ PCA", 
                  Style[
                  "RandomForest+ PCA", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest+ PCA"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest+ PCA"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[0.7292895909616282, 0.027744907880589302`], 
                    Around[0.9090906072868623, 0.01733291920719]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[0.7292895909616282, 0.027744907880589302`], 
                    Around[0.9090906072868623, 0.01733291920719]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest+ PCA"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest+ PCA"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["LinearRegression+ PCA", 
                  Style[
                  "LinearRegression+ PCA", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LinearRegression+ PCA"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LinearRegression+ PCA"]}, "RowHeader", False], "Mouse"],
               ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Around[1.319377930678673, 0.06857143838912945], 
                    Around[0.7612779463107979, 0.030953186238664242`]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Around[1.319377930678673, 0.06857143838912945], 
                    Around[0.7612779463107979, 0.030953186238664242`]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LinearRegression+ PCA"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LinearRegression+ PCA"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{486., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{486., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.898967233586772*^9, 3.898968330119121*^9, 
  3.899285857956533*^9},
 CellLabel->
  "Out[355]=",ExpressionUUID->"dfff7b98-8b4e-49c6-8c51-90708375cf56"]
}, Open  ]],

Cell["\<\
With this enlarged dataset of 393 examples (or more properly...with a sample \
of 80% of this, i.e., 314 training spectra and 79 validation spectra), we can \
can easily make predictions at  +/-0.25 pH units;  this is about 2x the \
variation of measured pH within triplicates\
\>", "Item",
 CellChangeTimes->{{3.8989673058321447`*^9, 3.898967373399905*^9}, {
  3.898967654054961*^9, 3.898967680215754*^9}, {3.898968338137198*^9, 
  3.898968345459831*^9}, {3.899285048982196*^9, 3.899285058885419*^9}, {
  3.8992859077314587`*^9, 
  3.899285922689672*^9}},ExpressionUUID->"3738adac-4f7d-4a94-9734-\
2567cf6c5da3"],

Cell["\<\
The advantage of using the EMD vanishes as we get more examples; simple GBT \
and/or Nearest Neighbor methods on the normalized spectra does about as well\
\>", "Item",
 CellChangeTimes->{{3.8989673058321447`*^9, 
  3.8989674635950413`*^9}},ExpressionUUID->"162685fb-6f6c-43b1-991a-\
f30cddb77dc4"],

Cell["\<\
PCA doesn\[CloseCurlyQuote]t help us (or stated another way, GBT and k-NN can \
use it and do almost as good as if they have the whole spectrum, but it doesn\
\[CloseCurlyQuote]t reduce the prediction error)\
\>", "Item",
 CellChangeTimes->{{3.8989673058321447`*^9, 3.898967423390239*^9}, {
  3.8989674913050947`*^9, 
  3.898967534667042*^9}},ExpressionUUID->"4d3235e5-09fa-433a-953d-\
5ec623161dcb"]
}, Open  ]]
},
WindowSize->{808, 847},
WindowMargins->{{0, Automatic}, {Automatic, 16}},
PrivateNotebookOptions->{"CloudPublishPath"->"/Published/2023.07.18_pH_\
spectroscopy.nb"},
SpellingDictionaries->{"CorrectWords"->{
 "Fordham", "Lipinski's", "Schrier", "Norquist", "na\[IDoubleDot]ve"}},
FrontEndVersion->"13.2 for Mac OS X x86 (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"d58ff197-d961-4ab5-99dd-9798a856e909"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 158, 3, 67, "Section",ExpressionUUID->"41bfdf1c-cbae-498c-b0ba-4ef64f7ba1eb"],
Cell[741, 27, 451, 10, 58, "Text",ExpressionUUID->"4815a82b-fa12-4ff9-8213-9f53b7e54dc4"],
Cell[1195, 39, 706, 15, 95, "Input",ExpressionUUID->"8ff1613a-309d-4d85-a065-e5221190e944"],
Cell[1904, 56, 5322, 126, 514, "Input",ExpressionUUID->"6aca49fe-a3aa-4286-907c-784382d9dae6"],
Cell[7229, 184, 2934, 74, 241, "Input",ExpressionUUID->"dd4d6e42-867a-4aa9-8329-2ebc0d0b79b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10200, 263, 269, 4, 67, "Section",ExpressionUUID->"f5d0b806-c80f-4db3-a9d2-f8c84e915187"],
Cell[CellGroupData[{
Cell[10494, 271, 215, 4, 54, "Subsection",ExpressionUUID->"377b13cc-230c-41f3-acfb-b115bd942306"],
Cell[10712, 277, 765, 14, 81, "Text",ExpressionUUID->"9d261de2-a048-44a9-98a1-60eaab59ddf6"],
Cell[CellGroupData[{
Cell[11502, 295, 1960, 48, 199, "Input",ExpressionUUID->"bf755c77-b890-4d85-a3c4-48a4a01f8bca"],
Cell[13465, 345, 591, 16, 34, "Output",ExpressionUUID->"43462ae0-7f8a-44b3-a531-1cd33fd7799d"]
}, Open  ]],
Cell[14071, 364, 271, 6, 58, "Text",ExpressionUUID->"1b801ed5-9f6e-4eb0-8166-ca02237055ae"],
Cell[CellGroupData[{
Cell[14367, 374, 1162, 30, 157, "Input",ExpressionUUID->"3f04ea22-ef2c-4719-a899-27a2712d9998"],
Cell[15532, 406, 2100, 45, 251, "Output",ExpressionUUID->"9a701cae-9f02-4022-b071-57fedc7cf8cc"]
}, Open  ]],
Cell[17647, 454, 329, 7, 58, "Text",ExpressionUUID->"f7538c97-fa47-4ce1-801e-cff34f43a712"],
Cell[CellGroupData[{
Cell[18001, 465, 779, 18, 94, "Input",ExpressionUUID->"dd138752-3338-42b6-a6bb-89ff7812a6e3"],
Cell[18783, 485, 344, 5, 34, "Output",ExpressionUUID->"d2103630-28aa-4a8c-b716-e5bcbd36c882"],
Cell[19130, 492, 26033, 743, 253, "Output",ExpressionUUID->"a80d3c31-3d35-44e0-a5c2-98a8125a675c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[45212, 1241, 244, 4, 54, "Subsection",ExpressionUUID->"0382c8c8-f9d9-4770-9c03-761319909325"],
Cell[45459, 1247, 949, 15, 127, "Text",ExpressionUUID->"46811501-d62f-4cdc-a792-b9f2d642c8b5"],
Cell[46411, 1264, 1028, 27, 94, "Input",ExpressionUUID->"27564f90-9b4f-45f3-b041-462b42eb2d2c"],
Cell[CellGroupData[{
Cell[47464, 1295, 1398, 31, 178, "Input",ExpressionUUID->"e72bfe56-3e20-459c-b5d5-d4744d941b6d"],
Cell[48865, 1328, 7518, 221, 255, "Output",ExpressionUUID->"0ff0e0a7-3399-4a2c-881d-b6ba7abe1ebf"],
Cell[56386, 1551, 7518, 221, 255, "Output",ExpressionUUID->"99286ebb-3f0b-4560-8913-816f43b21f5e"],
Cell[63907, 1774, 594, 13, 34, "Output",ExpressionUUID->"2f29aaba-4d90-427c-8889-6d01e9892b8b"]
}, Open  ]],
Cell[64516, 1790, 650, 13, 104, "Text",ExpressionUUID->"f5babc31-e0c0-454a-9c81-32d262f7a45d"],
Cell[CellGroupData[{
Cell[65191, 1807, 375, 6, 30, "Input",ExpressionUUID->"206e1cd7-15d7-4b6b-a4b2-fb6301c3b2ed"],
Cell[65569, 1815, 274, 6, 34, "Output",ExpressionUUID->"cd7c3b39-94d9-478b-b2cd-60c5259c7d1a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65880, 1826, 445, 9, 52, "Input",ExpressionUUID->"9d8cf37a-e27f-4597-a3f4-939e711eecbc"],
Cell[66328, 1837, 344, 7, 34, "Output",ExpressionUUID->"06105784-3008-4ea1-997b-7599cbc76f4c"],
Cell[66675, 1846, 293, 5, 34, "Output",ExpressionUUID->"c6933e8b-469a-427e-ba97-64fdb39bc83c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[67029, 1858, 177, 3, 67, "Section",ExpressionUUID->"522c2e09-53f6-48b7-becd-57a6bf8e6e93"],
Cell[67209, 1863, 296, 7, 35, "Text",ExpressionUUID->"268871c4-47b0-45d5-9ebb-23828c542587"],
Cell[67508, 1872, 2460, 62, 367, "Input",ExpressionUUID->"90cfb06f-3599-429c-9ce9-08149cfca993"],
Cell[69971, 1936, 168, 3, 35, "Text",ExpressionUUID->"ea25f5ff-5d82-4569-a9ac-1dda30a17f9b"],
Cell[CellGroupData[{
Cell[70164, 1943, 210, 4, 30, "Input",ExpressionUUID->"1ee5b0e4-7269-44b8-bd20-c42bf328bed0"],
Cell[70377, 1949, 42934, 768, 201, "Output",ExpressionUUID->"f7dbc486-4f9b-4df2-911d-89ff5a42a80c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[113360, 2723, 238, 4, 67, "Section",ExpressionUUID->"eb37714b-2f62-455e-8a4b-ccbbb3b3df22"],
Cell[113601, 2729, 446, 10, 58, "Text",ExpressionUUID->"33ec8577-5af7-49a3-8353-ca3cd3d1f24d"],
Cell[CellGroupData[{
Cell[114072, 2743, 1008, 27, 52, "Input",ExpressionUUID->"f6e12f12-dbc5-4737-8b74-feb5aec1c4f5"],
Cell[115083, 2772, 17492, 339, 62, "Output",ExpressionUUID->"8856c1ca-fc2b-43a2-8260-afa7fac6508a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132612, 3116, 666, 16, 136, "Input",ExpressionUUID->"99f4d45d-e983-4239-bc71-ef614dc001d9"],
Cell[133281, 3134, 58465, 1048, 309, "Output",ExpressionUUID->"3e3624fa-055a-4b0b-8531-f4476625cc29"]
}, Open  ]],
Cell[191761, 4185, 618, 12, 35, "Text",ExpressionUUID->"d7a9b6a2-af6d-4743-9ba0-77b4a6d7ad96"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192416, 4202, 186, 3, 67, "Section",ExpressionUUID->"3cd55a60-d3fe-4071-a2d9-d4a5b429d367"],
Cell[192605, 4207, 734, 17, 173, "Text",ExpressionUUID->"c9196d79-53ca-43a6-9487-e44be5930ced"],
Cell[193342, 4226, 444, 10, 30, "Input",ExpressionUUID->"64a6599b-44de-44a7-be44-46e1146eee21"],
Cell[CellGroupData[{
Cell[193811, 4240, 3628, 86, 346, "Input",ExpressionUUID->"f28e6b96-6714-4946-8eee-87ffefc1f2ea"],
Cell[197442, 4328, 446, 13, 34, "Output",ExpressionUUID->"9eee6111-2ab2-4852-87e1-3f7103fc5c32"]
}, Open  ]],
Cell[197903, 4344, 1078, 18, 127, "Text",ExpressionUUID->"4056c1a5-8e06-488f-8437-d2ce553e8b5f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199018, 4367, 178, 3, 67, "Section",ExpressionUUID->"f85d76b2-b1ca-4a4d-8500-d7a09779c8c7"],
Cell[CellGroupData[{
Cell[199221, 4374, 236, 5, 30, "Input",ExpressionUUID->"88b3bb1e-ed4d-49b3-b2cb-c5cebeb7c65c"],
Cell[199460, 4381, 62206, 1119, 335, "Output",ExpressionUUID->"dfff7b98-8b4e-49c6-8c51-90708375cf56"]
}, Open  ]],
Cell[261681, 5503, 623, 11, 74, "Item",ExpressionUUID->"3738adac-4f7d-4a94-9734-2567cf6c5da3"],
Cell[262307, 5516, 308, 6, 53, "Item",ExpressionUUID->"162685fb-6f6c-43b1-991a-f30cddb77dc4"],
Cell[262618, 5524, 410, 8, 53, "Item",ExpressionUUID->"4d3235e5-09fa-433a-953d-5ec623161dcb"]
}, Open  ]]
}
]
*)

